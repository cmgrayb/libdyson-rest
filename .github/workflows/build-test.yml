name: Build and Package Test

on:
  pull_request:
    branches: [ main, develop, "release/*" ]
  push:
    branches: [ main, develop, "release/*" ]
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  build-test:
    name: Build and Package Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build

    - name: Verify package contents
      shell: python
      run: |
        import glob
        import zipfile
        import tarfile
        import os

        print("=== Built packages ===")
        dist_files = glob.glob('dist/*')
        for f in dist_files:
            print(f"  {os.path.basename(f)} ({os.path.getsize(f)} bytes)")

        print("\n=== Wheel contents ===")
        wheel_files = glob.glob('dist/*.whl')
        if wheel_files:
            with zipfile.ZipFile(wheel_files[0], 'r') as zf:
                for name in zf.namelist()[:20]:  # Limit output
                    print(f"  {name}")
                if len(zf.namelist()) > 20:
                    print(f"  ... and {len(zf.namelist()) - 20} more files")
        else:
            print("  No wheel files found")

        print("\n=== Tarball contents ===")
        tar_files = glob.glob('dist/*.tar.gz')
        if tar_files:
            with tarfile.open(tar_files[0], 'r:gz') as tf:
                names = tf.getnames()
                for name in names[:20]:  # Limit output
                    print(f"  {name}")
                if len(names) > 20:
                    print(f"  ... and {len(names) - 20} more files")
        else:
            print("  No tarball files found")

    - name: Check package with twine
      shell: python
      run: |
        import glob
        import subprocess
        import sys

        dist_files = glob.glob('dist/*')
        if dist_files:
            result = subprocess.run([sys.executable, '-m', 'twine', 'check'] + dist_files,
                                  capture_output=True, text=True)
            print("Twine check output:")
            print(result.stdout)
            if result.stderr:
                print("Errors:")
                print(result.stderr)
            if result.returncode != 0:
                sys.exit(result.returncode)
            print("[OK] All distribution files passed twine check")
        else:
            print("No distribution files found")
            sys.exit(1)

    - name: Test package installation
      shell: python
      run: |
        import glob
        import subprocess
        import sys

        # Install the built package
        wheel_files = glob.glob('dist/*.whl')
        if wheel_files:
            print(f"Installing package: {wheel_files[0]}")
            result = subprocess.run([sys.executable, '-m', 'pip', 'install', wheel_files[0]],
                                  capture_output=True, text=True)
            print("Installation output:")
            print(result.stdout)
            if result.stderr:
                print("Errors:")
                print(result.stderr)
            if result.returncode != 0:
                sys.exit(result.returncode)
            print("[OK] Package installed successfully")
        else:
            print("No wheel files found")
            sys.exit(1)

        # Test basic import
        try:
            import libdyson_rest
            print("[OK] Package import successful")
        except ImportError as e:
            print(f"[ERROR] Package import failed: {e}")
            sys.exit(1)

        try:
            from libdyson_rest import DysonClient
            print("[OK] DysonClient import successful")
        except ImportError as e:
            print(f"[ERROR] DysonClient import failed: {e}")
            sys.exit(1)

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30
