name: "Manual Release: Stable"

# Manual stable releases from main branch
# Main branch represents production-ready, stable code
# CI workflows run on PRs to main, but releases are created manually
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Stable version to release (e.g., 1.0.0)'
        required: true
        type: string
      confirm_production:
        description: 'Type "CONFIRM" to proceed with production release'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  pull-requests: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Quality checks must pass first - call the optimized quality-checks workflow
  quality-gate:
    name: "🔍 Quality Gate"
    uses: ./.github/workflows/quality-checks.yml
    
  manual-release-stable:
    name: "🚀 Manual Release Stable"
    runs-on: ubuntu-latest
    needs: quality-gate  # Must pass quality checks first
    environment: pypi
    
    # Only run for manual triggers with explicit confirmation AND only for repository owner
    if: |
      github.event.inputs.confirm_production == 'CONFIRM' &&
      github.actor == 'cmgrayb'
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: "🧪 Run Full Test Suite"
        run: |
          python -m pytest tests/ -v --cov=src/ --cov-report=term-missing --cov-fail-under=80

      - name: "� Production Release Safety Check"
        run: |
          echo "## 🔒 Production Release Safety Check"
          echo "Version to release: ${{ github.event.inputs.version }}"
          echo "Confirmation received: ${{ github.event.inputs.confirm_production }}"
          echo ""
          echo "⚠️  This will publish to production PyPI"
          echo "⚠️  This action cannot be undone"
          echo "⚠️  Ensure all testing is complete"
          echo ""
          if [ "${{ github.event.inputs.confirm_production }}" != "CONFIRM" ]; then
            echo "❌ Production release not confirmed. Stopping workflow."
            exit 1
          fi
          echo "✅ Production release confirmed. Proceeding..."

      - name: "📝 Set Stable Version"
        id: version
        run: |
          STABLE_VERSION="${{ github.event.inputs.version }}"
          
          # Remove leading 'v' if user accidentally included it
          STABLE_VERSION=$(echo "$STABLE_VERSION" | sed 's/^v//')
          
          echo "Setting stable version: $STABLE_VERSION"
          
          # Validate version format (PEP 440 compliant for stable releases)
          # Accepts: 1.0, 1.0.0, 2024.1, 1.0.0.post1, etc.
          # Rejects: pre-release versions (alpha, beta, rc) for stable workflow
          if ! echo "$STABLE_VERSION" | grep -E '^[0-9]+(\.[0-9]+)*(\.(post|dev)[0-9]+)?$'; then
            echo "❌ Invalid version format for stable release."
            echo "   Use PEP 440 format: 1.0, 1.0.0, 2024.1, 1.0.0.post1"
            echo "   Pre-release versions (a, b, rc) not allowed in stable workflow"
            exit 1
          fi
          
          # Additional check: ensure it's not a pre-release version
          if echo "$STABLE_VERSION" | grep -E '(a|b|rc|alpha|beta|dev)[0-9]*$'; then
            echo "❌ Pre-release versions not allowed in stable workflow."
            echo "   Use auto-release workflows for alpha/beta/rc versions"
            exit 1
          fi
          
          # Set output immediately after validation (before any operations that might fail)
          echo "stable_version=$STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "📌 Stable version: $STABLE_VERSION"
          
          # Update version in pyproject.toml
          python scripts/update_version.py "$STABLE_VERSION"
          
          # Commit the version change
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "🚀 Release: v$STABLE_VERSION" || exit 0
          
          # Pull latest changes and push (handle concurrent updates)
          git pull origin main --rebase
          git push origin main

      - name: "🏷️ Create Git Tag"
        run: |
          VERSION="${{ steps.version.outputs.stable_version }}"
          echo "🏷️ Creating tag for version: $VERSION"
          
          if [ -z "$VERSION" ]; then
            echo "❌ Error: Version is empty or undefined"
            echo "Available outputs from version step:"
            echo "${{ toJSON(steps.version.outputs) }}"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "⚠️  Tag v$VERSION already exists, deleting it first"
            git tag -d "v$VERSION" || true
            git push origin ":refs/tags/v$VERSION" || true
          fi
          
          # Ensure we have the latest changes before tagging
          git pull origin main --rebase
          git tag -a "v$VERSION" -m "Stable release v$VERSION"
          git push origin "v$VERSION"
          echo "✅ Successfully created and pushed tag v$VERSION"

      - name: "📦 Build Package"
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: "🚀 Publish to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: "📋 Create GitHub Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.version.outputs.stable_version }}"
          release_name: "libdyson-rest v${{ steps.version.outputs.stable_version }}"
          body: |
            🎉 **Stable Release** - Production ready
            
            **Version:** `${{ steps.version.outputs.stable_version }}`
            **Published to:** PyPI
            **Branch:** `main`
            
            ## Installation
            ```bash
            pip install libdyson-rest==${{ steps.version.outputs.stable_version }}
            ```
            
            ## ✨ Stable Release
            This is a stable, production-ready release. All features have been thoroughly tested.
            
            ## 🔄 Auto-Generated Release
            This release was automatically created by the stable release pipeline.
          draft: false
          prerelease: false

      - name: "📊 Release Summary"
        run: |
          echo "## 🎉 Stable Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.stable_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** PyPI" >> $GITHUB_STEP_SUMMARY  
          echo "**Branch:** \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install libdyson-rest==${{ steps.version.outputs.stable_version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [PyPI Package](https://pypi.org/project/libdyson-rest/${{ steps.version.outputs.stable_version }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.stable_version }})" >> $GITHUB_STEP_SUMMARY
