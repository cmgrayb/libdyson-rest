name: "Auto-Release: Release Candidate"

on:
  push:
    branches:
      - "release/rc"
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force specific version (optional)'
        required: false
        type: string

permissions:
  contents: write
  id-token: write
  pull-requests: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Quality checks must pass first - call the optimized quality-checks workflow
  quality-gate:
    name: "🔍 Quality Gate"
    uses: ./.github/workflows/quality-checks.yml
    
  auto-release-rc:
    name: "🚀 Auto-Release RC"
    runs-on: ubuntu-latest
    needs: quality-gate  # Must pass quality checks first
    environment: pypi
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: "🧪 Run Tests"
        run: |
          python -m pytest tests/ -v --cov=src/ --cov-report=term-missing --cov-fail-under=80

      - name: "📝 Auto-increment RC Version"
        id: version
        run: |
          if [ -n "${{ github.event.inputs.force_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.force_version }}"
            echo "Using forced version: $NEW_VERSION"
            python scripts/update_version.py "$NEW_VERSION"
          else
            echo "Auto-incrementing release candidate version..."
            python scripts/update_version.py --increment rc
          fi
          
          # Get the new version
          NEW_VERSION=$(python scripts/update_version.py --show | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+[a-zA-Z0-9]*')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📌 New version: $NEW_VERSION"

      - name: "💾 Commit Version Update"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "🚀 Auto-release: Bump to v${{ steps.version.outputs.new_version }}" || exit 0

      - name: "🏷️ Create Git Tag"
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release candidate v${{ steps.version.outputs.new_version }}"

      - name: "⬆️ Push Changes and Tags"
        run: |
          git push origin release/rc
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: "📦 Build Package"
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: "🚀 Publish to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: "📋 Create GitHub Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.version.outputs.new_version }}"
          release_name: "libdyson-rest v${{ steps.version.outputs.new_version }} (Release Candidate)"
          body: |
            🎯 **Release Candidate** - Final testing before stable release
            
            **Version:** `${{ steps.version.outputs.new_version }}`
            **Published to:** PyPI
            **Branch:** `release/rc`
            
            ## Installation
            ```bash
            pip install libdyson-rest==${{ steps.version.outputs.new_version }}
            ```
            
            ## 🎯 Release Candidate Notice
            This is a release candidate. All features are stable and ready for production.
            Final testing and validation in progress.
            
            ## 🔄 Auto-Generated Release
            This release was automatically created by the release candidate pipeline.
          draft: false
          prerelease: true

      - name: "📊 Release Summary"
        run: |
          echo "## 🎉 Release Candidate Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** PyPI" >> $GITHUB_STEP_SUMMARY  
          echo "**Branch:** \`release/rc\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install libdyson-rest==${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [PyPI Package](https://pypi.org/project/libdyson-rest/${{ steps.version.outputs.new_version }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
